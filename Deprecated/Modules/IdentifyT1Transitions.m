% This script identifies the occurence of T1 transitions from connectivity
% information in the detailed output files generated by Epi-Scale.

function [cellPos, T1Pos] = IdentifyT1Transitions( rawDetails )

lagAfterDetection = 2; % How many timesteps after a T1 transition can another be registered?

%% Initialization
timesteps = length(rawDetails);
cellPos = cell(1, timesteps);
T1Pos = cell(1, timesteps);

%% Analysis
cellNumber = 0;
for t = 1:timesteps
    cellData = rawDetails{t};
    newCellNumber = length(cellData);
    
    % Check to make sure data was not corrupted, since cells are not
    % destroyed in this simulation.
    if newCellNumber < cellNumber
        cellPos = [];
        T1Pos = [];
        break
        error('Decreasing cell number: Data coruption')
    end
    
    edgeCell = str2double({cellData.IsBoundrayCell});
    growthProgress = str2double({cellData.GrowthProgress});
    
    newAdjacencyMatrix = makeAdjacencyMatrix({cellData.NeighborCells});
    [rTemp, ~] = parseCellPositionString({cellData.CellCenter});
    
    if cellNumber > 0
        
        neighborChanges = newAdjacencyMatrix(1:cellNumber,1:cellNumber) - adjacencyMatrix(1:cellNumber,1:cellNumber);
        % is and js are cells which gained a neighbor
        [is, js] = find(neighborChanges > 0);
        
        T1 = 0;
        
        tempPositions = [];
        for n = 1:length(is)
            x = is(n);
            y = js(n);
            
            if ~isnan(edgeCell(x)) && ~isnan(edgeCell(y)) && ...
                    ~edgeCell(x) && ~edgeCell(y) &&  x < y && ...
                    growthProgress(x) < 0.91 && growthProgress(y) < 0.91 && ...
                    growthProgress(x) > 0.03 && growthProgress(y) > 0.03 && ...
                    trackedCells(x) <= 0 && trackedCells(y) <= 0
                T1 = T1 + 1;
                tempPositions = [tempPositions mean([rTemp(x) rTemp(y)])];
                trackedCells(x) = lagAfterDetection;
                trackedCells(y) = lagAfterDetection;
            end
        end
        T1Pos{t} = tempPositions;
    end
    cellPos{t} = rTemp;
    
    trackedCells((cellNumber+1):newCellNumber) = lagAfterDetection;
    trackedCells = trackedCells - 1;
    
    cellNumber = newCellNumber;
    adjacencyMatrix = newAdjacencyMatrix;
end